{"version":3,"sources":["components/TimerManual/TimerManual.js","components/TimerAuto/TimerAuto.js","App.js","serviceWorker.js","index.js"],"names":["TimerManual","time","autoplay","step","useState","isOn1","setIsOn1","timerMan","setTimerManual","width1","setWidth1","useEffect","interval1","console","log","setInterval","clearInterval","className","role","aria-label","type","disabled","onClick","style","width","TimerAuto","isOn2","setIsOn2","timerA","setTimerA","width2","setWidth2","interval2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49283f41.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TimerManual.scss';\n\n\nconst TimerManual = ({time, autoplay, step}) => {\n  const [isOn1, setIsOn1] = useState(autoplay); \n  const [timerMan, setTimerManual] = useState(time);\n  const [width1, setWidth1] = useState(1000);\n\n  const onReset1 = () => {\n      setIsOn1(false);\n      setTimerManual(time);\n      setWidth1(1000);\n  };\n\n  useEffect(() => {\n      let interval1;\n      if (isOn1 && timerMan!==0) {\n        console.log(\"Таймер 1. Осталось времени: \" + timerMan);\n        interval1 = setInterval(\n          () => {\n            setTimerManual(timerMan => timerMan - step) || setWidth1(width1 => width1 - step*100)\n          },\n          1000,\n        );\n      }\n      else if(timerMan === 0){\n        console.log(\"Таймер 1. Время вышло!\");\n      }\n      return () => clearInterval(interval1);\n  }, [isOn1, timerMan, step]);\n\n\n\n  return (\n    <>\n      <div className=\"firstTimer mb-3\">\n      <br/>\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n          { (\n          <button type=\"button\" className=\"btn btn-light btn-md\" disabled={isOn1 === true} onClick={() => setIsOn1(true)}>\n            Start\n          </button> \n          )}\n        <br/>\n        { (\n        <button type=\"button\" className=\"btn btn-light btn-md\" disabled={isOn1 === false} onClick={() => setIsOn1(false)}>\n          Stop\n        </button>\n      )}\n      <br/>\n      <button type=\"button\" className=\"btn btn-light btn-md\" disabled={timerMan === time} onClick={onReset1}>\n        Reset\n      </button>\n      </div>\n      </div>\n      <div className=\"rainbow-line mb-5\" style={{width : width1+\"px\"}}>\n        <div className=\"textContent\"> \n          {timerMan}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default TimerManual","import React, { useState, useEffect } from 'react';\nimport './TimerAuto.scss';\n\n\nconst TimerAuto = ({time, autoplay, step}) => {\n    const [isOn2, setIsOn2] = useState(autoplay); \n    const [timerA, setTimerA] = useState(time);\n    const [width2, setWidth2] = useState(1000);\n\n    useEffect(() => {\n        let interval2;\n        if (isOn2 && timerA!==0) {\n          console.log(\"Таймер 2. Осталось времени: \" + timerA);\n          interval2 = setInterval(\n            () => {\n              setTimerA(timerA => timerA - step ) || setWidth2(width2 => width2 - step*10)\n            },\n            1000,\n          );\n        }\n        else if(timerA === 0){\n          console.log(\"Таймер 2. Время вышло!\");      \n        }\n        return () => clearInterval(interval2) ;\n    }, [isOn2, timerA, step, width2]);\n\n    const onReset2 = () => {\n        setIsOn2(false);\n        setTimerA(time);\n        setWidth2(1000);\n    };\n\n    return (\n        <div>\n          <div className=\"secondTimer mb-3\">\n          <br/>\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n          { (\n            <button type=\"button\" className=\"btn btn-light btn-md\" disabled={isOn2 === true} onClick={() => setIsOn2(true)}>\n              Start\n            </button> \n          )}\n          <br/>\n          { (\n            <button type=\"button\" className=\"btn btn-light btn-md\" disabled={isOn2 === false} onClick={() => setIsOn2(false)}>\n              Stop\n            </button>\n          )}\n          <br/>\n          <button type=\"button\" className=\"btn btn-light btn-md\" disabled={timerA === time} onClick={onReset2}>\n            Reset\n          </button>\n          </div>\n        </div>\n        <div className=\"color-flash-line\" style={{width : width2+\"px\"}} >\n          <div className=\"textContent\" >\n            {timerA}\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default TimerAuto","import React from 'react';\nimport TimerManual from './components/TimerManual/TimerManual';\nimport TimerAuto from './components/TimerAuto/TimerAuto';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <h1 className=\"text-center mb-5 py-3 text-white text-shadow\">Методы жизненного цикла и хуки</h1>\n        <TimerManual time={10} autoplay={false} step={1}/> \n        <TimerAuto time={100} autoplay step={2}/>\n      </div>\n    </div>  \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}